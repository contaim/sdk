// Copyright (c) 2021 Contaim, LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

package plugin

import (
	"github.com/contaim/sdk/plugin/proto/v1"
	"github.com/contaim/sdk/protos/hclspec/v1"
)

type (
	// BasePlugin is an interface that all plugins must implement to be accepted
	// by Contaim as a valid plugin.
	BasePlugin interface {

		// PluginInfo returns information about the plugin.
		PluginInfo() (*PluginInfoResponse, error)

		// ConfigSchema returns the hcl schema that user-defined configuration should
		// meet in order to be accepted by the Daemon.
		ConfigSchema() (*hclspec.Spec, error)

		// SetConfig sets the raw configuration provided by the user after it is validated
		// so that the plugin may be configured. This method will also receive configuration
		// given to it by the Daemon runtime.
		SetConfig(c *Config) error
	}

	// PluginInfoResponse is sent by the plugin in response to the request for the information
	// by the Daemon.
	PluginInfoResponse struct {
		Runtime           string
		Type              string
		PluginApiVersions []string
		PluginVersion     string
		Name              string
	}

	// Config provides configuration to the plugin from the Daemon.
	Config struct {
		PluginConfig []byte
		DaemonConfig *DaemonConfig
		ServerConfig *ServerConfig
		ApiVersion   string
	}

	// DaemonConfig is the configuration sent to the plugin by the Daemon that is automatically
	// generated by the Daemon and is not set by the end-user directly.
	DaemonConfig struct {
		Driver *DaemonDriverConfig
	}

	// DaemonDriverConfig is the configuration for driver plugins.
	DaemonDriverConfig struct{}

	// ServerConfig is the configuration sent to the plugin by the server that is automatically
	// generated by the server and is not set by the end-user directly.
	ServerConfig struct {
		Builder *ServerBuilderConfig
	}

	// ServerBuilderConfig is the configuration for driver plugins.
	ServerBuilderConfig struct{}
)

// toProto converts the DaemonConfig implementation to the protobuf implementation.
func (c *DaemonConfig) toProto() *proto.DaemonConfig {
	if c == nil {
		return nil
	}

	return &proto.DaemonConfig{
		Driver: &proto.DaemonDriverConfig{},
	}
}

func protoToDaemonConfig(proto *proto.DaemonConfig) *DaemonConfig {
	if proto == nil {
		return nil
	}

	return &DaemonConfig{
		Driver: &DaemonDriverConfig{},
	}
}

// toProto converts the ServerConfig implementation to the protobuf implementation.
func (c *ServerConfig) toProto() *proto.ServerConfig {
	if c == nil {
		return nil
	}

	return &proto.ServerConfig{
		Builder: &proto.ServerBuilderConfig{},
	}
}

func protoToServerConfig(proto *proto.ServerConfig) *ServerConfig {
	if proto == nil {
		return nil
	}

	return &ServerConfig{
		Builder: &ServerBuilderConfig{},
	}
}
